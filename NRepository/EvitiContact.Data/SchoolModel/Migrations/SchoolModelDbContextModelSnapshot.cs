// <auto-generated />
using System;
using EvitiContact.SchoolModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EvitiContact.Data.SchoolModel.Migrations
{
    [DbContext(typeof(SchoolModelDbContext))]
    partial class SchoolModelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EvitiContact.SchoolModel.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnName("CourseID");

                    b.Property<int>("Credits")
                        .HasColumnName("Credits");

                    b.Property<int>("DepartmentID")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Title")
                        .HasColumnName("Title")
                        .HasMaxLength(50);

                    b.HasKey("CourseID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Course","School");
                });

            modelBuilder.Entity("EvitiContact.SchoolModel.CourseAssignment", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnName("CourseID");

                    b.Property<int>("InstructorID")
                        .HasColumnName("InstructorID");

                    b.HasKey("CourseID", "InstructorID");

                    b.HasIndex("InstructorID");

                    b.ToTable("CourseAssignment","School");
                });

            modelBuilder.Entity("EvitiContact.SchoolModel.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DepartmentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Budget")
                        .HasColumnName("Budget")
                        .HasColumnType("money");

                    b.Property<int?>("InstructorID")
                        .HasColumnName("InstructorID");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("StartDate");

                    b.HasKey("DepartmentID");

                    b.HasIndex("InstructorID");

                    b.ToTable("Department","School");
                });

            modelBuilder.Entity("EvitiContact.SchoolModel.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EnrollmentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID")
                        .HasColumnName("CourseID");

                    b.Property<int?>("Grade")
                        .HasColumnName("Grade");

                    b.Property<int?>("GradeAsEnum");

                    b.Property<int>("StudentID")
                        .HasColumnName("StudentID");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("Enrollment","School");
                });

            modelBuilder.Entity("EvitiContact.SchoolModel.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("HireDate")
                        .HasColumnName("HireDate");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Instructor","School");
                });

            modelBuilder.Entity("EvitiContact.SchoolModel.OfficeAssignment", b =>
                {
                    b.Property<int>("InstructorID")
                        .HasColumnName("InstructorID");

                    b.Property<string>("Location")
                        .HasColumnName("Location")
                        .HasMaxLength(50);

                    b.HasKey("InstructorID");

                    b.ToTable("OfficeAssignment","School");
                });

            modelBuilder.Entity("EvitiContact.SchoolModel.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnName("EnrollmentDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Student","School");
                });

            modelBuilder.Entity("EvitiContact.SchoolModel.Course", b =>
                {
                    b.HasOne("EvitiContact.SchoolModel.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EvitiContact.SchoolModel.CourseAssignment", b =>
                {
                    b.HasOne("EvitiContact.SchoolModel.Course", "Course")
                        .WithMany("CourseAssignments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EvitiContact.SchoolModel.Instructor", "Instructor")
                        .WithMany("CourseAssignments")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EvitiContact.SchoolModel.Department", b =>
                {
                    b.HasOne("EvitiContact.SchoolModel.Instructor", "Instructor")
                        .WithMany("Departments")
                        .HasForeignKey("InstructorID");
                });

            modelBuilder.Entity("EvitiContact.SchoolModel.Enrollment", b =>
                {
                    b.HasOne("EvitiContact.SchoolModel.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EvitiContact.SchoolModel.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EvitiContact.SchoolModel.OfficeAssignment", b =>
                {
                    b.HasOne("EvitiContact.SchoolModel.Instructor", "Instructor")
                        .WithOne("OfficeAssignment")
                        .HasForeignKey("EvitiContact.SchoolModel.OfficeAssignment", "InstructorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
